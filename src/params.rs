// Generated by scripts/build_param.py
use nih_plug::prelude::*;
use faust_types::{FaustDsp, ParamIndex};

#[derive(Params)]
pub struct ElysieraParams {
    #[id = "mix"]
    pub mix: FloatParam,
    #[id = "pre_gain"]
    pub pre_gain: FloatParam,
    #[id = "post_gain"]
    pub post_gain: FloatParam,
    #[id = "low_decay"]
    pub low_decay: FloatParam,
    #[id = "lf_crossover"]
    pub lf_crossover: FloatParam,
    #[id = "mid_decay"]
    pub mid_decay: FloatParam,
    #[id = "hf_damping"]
    pub hf_damping: FloatParam,
    #[id = "reverb_delay"]
    pub reverb_delay: FloatParam,
    #[id = "reverb_mix"]
    pub reverb_mix: FloatParam,
    #[id = "delay"]
    pub delay: FloatParam,
    #[id = "feedback"]
    pub feedback: FloatParam,
    #[id = "lowpass"]
    pub lowpass: FloatParam,
    #[id = "lowpass_q"]
    pub lowpass_q: FloatParam,
    #[id = "highpass"]
    pub highpass: FloatParam,
    #[id = "resonance"]
    pub resonance: FloatParam,
    #[id = "pitch_a"]
    pub pitch_a: FloatParam,
    #[id = "pitch_a_mix"]
    pub pitch_a_mix: FloatParam,
    #[id = "pitch_b"]
    pub pitch_b: FloatParam,
    #[id = "pitch_b_mix"]
    pub pitch_b_mix: FloatParam,
    #[id = "pitch_mod_rate"]
    pub pitch_mod_rate: FloatParam,
    #[id = "pitch_mod_mix"]
    pub pitch_mod_mix: FloatParam,
    #[id = "volume_mod_rate"]
    pub volume_mod_rate: FloatParam,
    #[id = "volume_mod_mix"]
    pub volume_mod_mix: FloatParam,
}

impl Default for ElysieraParams {
    fn default() -> Self {
        Self {
            mix: FloatParam::new("mix", 0.5, FloatRange::Linear {min: 0.0, max: 1.0}),
            pre_gain: FloatParam::new("pre_gain", 0.0, FloatRange::Linear {min: -30.0, max: 10.0}),
            post_gain: FloatParam::new("post_gain", 0.0, FloatRange::Linear {min: -30.0, max: 10.0}),
            low_decay: FloatParam::new("low_decay", 3.7, FloatRange::Linear {min: 1.0, max: 60.0}),
            lf_crossover: FloatParam::new("lf_crossover", 440.0, FloatRange::Linear {min: 50.0, max: 1000.0}),
            mid_decay: FloatParam::new("mid_decay", 4.68, FloatRange::Linear {min: 1.0, max: 60.0}),
            hf_damping: FloatParam::new("hf_damping", 8600.0, FloatRange::Linear {min: 1500.0, max: 0.49 * 44100.0}),
            reverb_delay: FloatParam::new("reverb_delay", 0.0, FloatRange::Linear {min: 0.0, max: 100.0}),
            reverb_mix: FloatParam::new("reverb_mix", 1.0, FloatRange::Linear {min: 0.0, max: 1.0}),
            delay: FloatParam::new("delay", 0.5, FloatRange::Linear {min: 0.0, max: 5.0}),
            feedback: FloatParam::new("feedback", 0.5, FloatRange::Linear {min: 0.0, max: 0.99}),
            lowpass: FloatParam::new("lowpass", 18000.0, FloatRange::Linear {min: 25.0, max: 22000.0}),
            lowpass_q: FloatParam::new("lowpass_q", 0.71, FloatRange::Linear {min: 0.1, max: 2.0}),
            highpass: FloatParam::new("highpass", 250.0, FloatRange::Linear {min: 25.0, max: 22000.0}),
            resonance: FloatParam::new("resonance", 0.71, FloatRange::Linear {min: 0.1, max: 2.0}),
            pitch_a: FloatParam::new("pitch_a", 12.0, FloatRange::Linear {min: -12.0, max: 12.0}),
            pitch_a_mix: FloatParam::new("pitch_a_mix", 0.6, FloatRange::Linear {min: 0.0, max: 1.0}),
            pitch_b: FloatParam::new("pitch_b", 5.0, FloatRange::Linear {min: -12.0, max: 12.0}),
            pitch_b_mix: FloatParam::new("pitch_b_mix", 0.6, FloatRange::Linear {min: 0.0, max: 1.0}),
            pitch_mod_rate: FloatParam::new("pitch_mod_rate", 3.1, FloatRange::Linear {min: 0.01, max: 10.0}),
            pitch_mod_mix: FloatParam::new("pitch_mod_mix", 1.0, FloatRange::Linear {min: 0.0, max: 1.0}),
            volume_mod_rate: FloatParam::new("volume_mod_rate", 3.1, FloatRange::Linear {min: 0.01, max: 10.0}),
            volume_mod_mix: FloatParam::new("volume_mod_mix", 1.0, FloatRange::Linear {min: 0.0, max: 1.0}),
        }
    }
}

impl ElysieraParams {
    pub fn dsp_set_params(&self, dsp: &mut Box<crate::dsp::ElysieraDSP>) {
        dsp.set_param(MIX, self.mix.value());
        dsp.set_param(PRE_GAIN, self.pre_gain.value());
        dsp.set_param(POST_GAIN, self.post_gain.value());
        dsp.set_param(LOW_DECAY, self.low_decay.value());
        dsp.set_param(LF_CROSSOVER, self.lf_crossover.value());
        dsp.set_param(MID_DECAY, self.mid_decay.value());
        dsp.set_param(HF_DAMPING, self.hf_damping.value());
        dsp.set_param(REVERB_DELAY, self.reverb_delay.value());
        dsp.set_param(REVERB_MIX, self.reverb_mix.value());
        dsp.set_param(DELAY, self.delay.value());
        dsp.set_param(FEEDBACK, self.feedback.value());
        dsp.set_param(LOWPASS, self.lowpass.value());
        dsp.set_param(LOWPASS_Q, self.lowpass_q.value());
        dsp.set_param(HIGHPASS, self.highpass.value());
        dsp.set_param(RESONANCE, self.resonance.value());
        dsp.set_param(PITCH_A, self.pitch_a.value());
        dsp.set_param(PITCH_A_MIX, self.pitch_a_mix.value());
        dsp.set_param(PITCH_B, self.pitch_b.value());
        dsp.set_param(PITCH_B_MIX, self.pitch_b_mix.value());
        dsp.set_param(PITCH_MOD_RATE, self.pitch_mod_rate.value());
        dsp.set_param(PITCH_MOD_MIX, self.pitch_mod_mix.value());
        dsp.set_param(VOLUME_MOD_RATE, self.volume_mod_rate.value());
        dsp.set_param(VOLUME_MOD_MIX, self.volume_mod_mix.value());
    }
}
pub const MIX: ParamIndex = ParamIndex(0);
pub const PRE_GAIN: ParamIndex = ParamIndex(1);
pub const POST_GAIN: ParamIndex = ParamIndex(2);
pub const LOW_DECAY: ParamIndex = ParamIndex(3);
pub const LF_CROSSOVER: ParamIndex = ParamIndex(4);
pub const MID_DECAY: ParamIndex = ParamIndex(5);
pub const HF_DAMPING: ParamIndex = ParamIndex(6);
pub const REVERB_DELAY: ParamIndex = ParamIndex(7);
pub const REVERB_MIX: ParamIndex = ParamIndex(8);
pub const DELAY: ParamIndex = ParamIndex(9);
pub const FEEDBACK: ParamIndex = ParamIndex(10);
pub const LOWPASS: ParamIndex = ParamIndex(11);
pub const LOWPASS_Q: ParamIndex = ParamIndex(12);
pub const HIGHPASS: ParamIndex = ParamIndex(13);
pub const RESONANCE: ParamIndex = ParamIndex(14);
pub const PITCH_A: ParamIndex = ParamIndex(15);
pub const PITCH_A_MIX: ParamIndex = ParamIndex(16);
pub const PITCH_B: ParamIndex = ParamIndex(17);
pub const PITCH_B_MIX: ParamIndex = ParamIndex(18);
pub const PITCH_MOD_RATE: ParamIndex = ParamIndex(19);
pub const PITCH_MOD_MIX: ParamIndex = ParamIndex(20);
pub const VOLUME_MOD_RATE: ParamIndex = ParamIndex(21);
pub const VOLUME_MOD_MIX: ParamIndex = ParamIndex(22);
